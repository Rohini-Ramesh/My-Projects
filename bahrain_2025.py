# -*- coding: utf-8 -*-
"""Bahrain 2025.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/169iqcSNt-yHjjrAfPiWet2YDKScOcRSb
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from xgboost import XGBClassifier
from sklearn.metrics import accuracy_score

# ---------------------- STEP 1: Load and clean data ----------------------
df = pd.read_csv('Barhain2024.csv')  # <-- Use your dataset filename here
df.dropna(inplace=True)

# Clean compound names
df['Compound'] = df['Compound'].str.strip().str.title()

# Convert time strings to seconds
def time_to_seconds(time_str):
    if pd.isna(time_str):
        return None
    if isinstance(time_str, (int, float)):
        return float(time_str)
    if ':' in time_str:
        m, s = time_str.split(':')
        return int(m) * 60 + float(s)
    else:
        return float(time_str)

time_cols = ['LapTime', 'Sector1Time', 'Sector2Time', 'Sector3Time']
for col in time_cols:
    df[col] = df[col].apply(time_to_seconds)
df.dropna(subset=time_cols, inplace=True)

# ---------------------- STEP 2: Aggregate stats per driver ----------------------
agg_df = df.groupby('Driver').agg({
    'LapTime': 'mean',
    'Sector1Time': 'mean',
    'Sector2Time': 'mean',
    'Sector3Time': 'mean',
    'MaxSpeed': 'max',
    'LapNumber': 'max',
    'Compound': lambda x: x.mode()[0]  # most frequent compound
}).reset_index()

# Get final positions (last lap)
final_positions = df[df['LapNumber'] == df['LapNumber'].max()][['Driver', 'Position']].drop_duplicates(subset='Driver')
data = pd.merge(agg_df, final_positions, on='Driver')

# Encode categorical values
le_driver = LabelEncoder()
le_compound = LabelEncoder()
data['Driver_encoded'] = le_driver.fit_transform(data['Driver'])
data['Compound_encoded'] = le_compound.fit_transform(data['Compound'])

# Target: Winner or not
data['Winner'] = (data['Position'] == 1).astype(int)

# ---------------------- STEP 3: Prepare features and train model ----------------------
X = data[['LapTime', 'Sector1Time', 'Sector2Time', 'Sector3Time', 'MaxSpeed', 'Compound_encoded']]
y = data['Winner']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = XGBClassifier(eval_metric='logloss')
model.fit(X_train, y_train)

# ---------------------- STEP 4: Evaluate model ----------------------
preds = model.predict(X_test)
acc = accuracy_score(y_test, preds)
print(f"\n✅ Model Accuracy: {acc:.2f}\n")

# ---------------------- STEP 5: Predict win probabilities for all drivers ----------------------
win_probs = model.predict_proba(X)[:, 1]

ranking_df = data[['Driver']].copy()
ranking_df['Win_Probability'] = win_probs
ranking_df = ranking_df.sort_values(by='Win_Probability', ascending=False).reset_index(drop=True)

print("🏁 Predicted Rankings for Bahrain GP 2025:\n")
print(ranking_df.to_string(index=False))